// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IGBDBAuth {
  id    Int    @id @default(autoincrement())
  token String

  @@map("igdb_auth")
}

model User {
  id        Int      @id @default(autoincrement())
  oauthId   String   @unique @map("oauth_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  profile   Profile?
  GamesStatus GamesStatus[]

  @@map("users")
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String?   @unique
  avatarUrl String   @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  oauthId    String      @unique @map("oauth_id")
  user      User     @relation(fields: [oauthId], references: [oauthId], onDelete: Cascade)
  collections Collection[]
  @@map("profiles")
}

model Game {
  id              Int               @id @default(autoincrement())
  hltbId          Int               @unique @map("hltb_id")
  name            String
  slug            String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  genres          GamesGenre[]
  cover           Cover?
  release         Release?
  platformForGame PlatformForGame[]
  gamesCollection GamesCollection[]
  gamesStatus     GamesStatus[]

  @@map("games")
}

model Genre {
  id        Int          @id @default(autoincrement())
  name      String
  slug      String       @unique
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  games     GamesGenre[]

  @@map("genres")
}

model Cover {
  id        Int      @id @default(autoincrement())
  smallUrl       String
  mediumUrl      String
  bigUrl         String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  gameId    Int      @unique @map("game_id")
  games     Game     @relation(fields: [gameId], references: [id])

  @@map("cover")
}

model GamesGenre {
  gameId    Int      @map("game_id")
  genreSlug   String      @map("genre_slug")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  game      Game     @relation(fields: [gameId], references: [id])
  genre     Genre    @relation(fields: [genreSlug], references: [slug])

  @@id([gameId, genreSlug])
  @@map("game_genre")
}

model Release {
  id        Int      @id @default(autoincrement())
  date      Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  gameId    Int      @unique @map("game_id")
  game      Game     @relation(fields: [gameId], references: [id])

  @@map("release")
}

model PlatformForGame {
  gameId     Int      @map("game_id")
  platformSlug String      @map("platform_slug")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  game       Game     @relation(fields: [gameId], references: [id])
  platform   Platform @relation(fields: [platformSlug], references: [slug])

  @@id([gameId, platformSlug])
  @@map("game_platform")
}

model Platform {
  id              Int               @id @default(autoincrement())
  name            String
  slug            String            @unique
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  PlatformForGame PlatformForGame[]
  GamesStatus     GamesStatus[]

  @@map("platform")
}

model GamesCollection {
    gameId       Int      @map("game_id")
    collectionId Int      @map("collection_id")
    createdAt    DateTime @default(now()) @map("created_at")
    updatedAt    DateTime @updatedAt @map("updated_at")
    game         Game     @relation(fields: [gameId], references: [id])
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    @@id([gameId, collectionId])
    @@map("game_collection")
}


model Collection {
    id        Int      @id @default(autoincrement())
    name      String
    description String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    gamesCollection     GamesCollection[]
    profileId    Int       @map("profile_id")
    profile      Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
    status      CollectionStatus @default(ACTIVE)
    @@map("collection")
}

enum CollectionStatus {
    ACTIVE
    REMOVED
}

enum GameStatus {
    COMPLETED
    RETIRED
    IN_PROGRESS
}

model GamesStatus {
    id       Int      @id @default(autoincrement())
    oauthId  String      @map("oauth_id")
    user      User     @relation(fields: [oauthId], references: [oauthId], onDelete: Cascade)
    completedIn GamesStatusCompletion?
    score   String?
    platformId Int @map("platform_id")
    platform   Platform @relation(fields: [platformId], references: [id])
    status   GameStatus
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    gameId   Int      @map("game_id")
    game     Game     @relation(fields: [gameId], references: [id])
    achievementsCompleted Boolean @map("achievements_completed")
    review String?
    @@map("games_status")
}

model GamesStatusCompletion {
    id      Int      @id @default(autoincrement())
    hours  Int?
    minutes Int?
    seconds Int?
    gamesStatusId Int @map("games_status_id") @unique
    gamesStatus   GamesStatus @relation(fields: [gamesStatusId], references: [id])
    @@map("games_status_completion")
}
