// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IGBDBAuth {
  id    Int    @id @default(autoincrement())
  token String

  @@map("igdb_auth")
}

model User {
  id                                  Int                                  @id @default(autoincrement())
  oauthId                             String                               @unique @map("oauth_id")
  createdAt                           DateTime                             @default(now()) @map("created_at")
  updatedAt                           DateTime                             @updatedAt @map("updated_at")
  profile                             Profile?
  friends                             Friend[]
  friendsList                         FriendsList?
  howLongToBeatAccountMigrationStatus HowLongToBeatAccountMigrationStatus?
  GamesStatus                         GamesStatus[]
  userActivity                        UserActivity[]
  role                                UserRole?
  FriendsRequestsForUsersOwner        FriendsRequestsForUsers[]            @relation(name: "FriendRequestOwner")
  FriendsRequestsForUsersReceiver     FriendsRequestsForUsers[]            @relation(name: "FriendRequestReceiver")

  @@map("users")
}

model Profile {
  id          Int          @id @default(autoincrement())
  name        String?
  email       String?      @unique
  avatarUrl   String       @map("avatar_url")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  oauthId     String       @unique @map("oauth_id")
  user        User         @relation(fields: [oauthId], references: [oauthId], onDelete: Cascade)
  collections Collection[]

  @@map("profiles")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  oauthId   String   @unique @map("oauth_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [oauthId], references: [oauthId], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id])

  @@map("user_roles")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        RoleEnum         @unique
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  usersRoles  UserRole[]
  permissions PermissionRole[]

  @@map("roles")
}

enum RoleEnum {
  ADMIN
  USER
}

model PermissionRole {
  permissionId Int        @map("permission_id")
  roleId       Int        @map("role_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([permissionId, roleId])
  @@map("permission_role")
}

model Permission {
  id         Int              @id @default(autoincrement())
  name       String
  permission String           @unique
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")
  roles      PermissionRole[]

  @@map("permissions")
}

model Game {
  id              Int                 @id @default(autoincrement())
  hltbId          Int                 @unique @map("hltb_id")
  name            String
  slug            String
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  genres          GamesGenre[]
  cover           Cover?
  release         Release?
  completionTime  GameCompletionTime?
  platformForGame PlatformForGame[]
  gamesCollection GamesCollection[]
  gamesStatus     GamesStatus[]
  userActivity    UserActivity[]

  @@map("games")
}

model GameCompletionTime {
  id            Int      @id @default(autoincrement())
  main          Int
  mainExtra     Int
  completionist Int
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  gameId        Int      @unique @map("game_id")
  game          Game     @relation(fields: [gameId], references: [id])

  @@map("game_completion_time")
}

model Genre {
  id        Int          @id @default(autoincrement())
  name      String
  slug      String       @unique
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  games     GamesGenre[]

  @@map("genres")
}

model Cover {
  id        Int      @id @default(autoincrement())
  smallUrl  String
  mediumUrl String
  bigUrl    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  gameId    Int      @unique @map("game_id")
  games     Game     @relation(fields: [gameId], references: [id])

  @@map("cover")
}

model GamesGenre {
  gameId    Int      @map("game_id")
  genreSlug String   @map("genre_slug")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  game      Game     @relation(fields: [gameId], references: [id])
  genre     Genre    @relation(fields: [genreSlug], references: [slug])

  @@id([gameId, genreSlug])
  @@map("game_genre")
}

model Release {
  id        Int      @id @default(autoincrement())
  date      Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  gameId    Int      @unique @map("game_id")
  game      Game     @relation(fields: [gameId], references: [id])

  @@map("release")
}

model PlatformForGame {
  gameId       Int      @map("game_id")
  platformSlug String   @map("platform_slug")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  game         Game     @relation(fields: [gameId], references: [id])
  platform     Platform @relation(fields: [platformSlug], references: [slug])

  @@id([gameId, platformSlug])
  @@map("game_platform")
}

model Platform {
  id              Int               @id @default(autoincrement())
  name            String
  slug            String            @unique
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  PlatformForGame PlatformForGame[]
  GamesStatus     GamesStatus[]

  @@map("platform")
}

model GamesCollection {
  gameId       Int        @map("game_id")
  collectionId Int        @map("collection_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  game         Game       @relation(fields: [gameId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([gameId, collectionId])
  @@map("game_collection")
}

model Collection {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  gamesCollection GamesCollection[]
  profileId       Int               @map("profile_id")
  profile         Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  status          CollectionStatus  @default(ACTIVE)

  @@map("collection")
}

enum CollectionStatus {
  ACTIVE
  REMOVED
}

enum GameStatus {
  COMPLETED
  RETIRED
  IN_PROGRESS
}

model GamesStatus {
  id                    Int                    @id @default(autoincrement())
  oauthId               String                 @map("oauth_id")
  user                  User                   @relation(fields: [oauthId], references: [oauthId], onDelete: Cascade)
  completedIn           GamesStatusCompletion?
  score                 String?
  platformId            Int                    @map("platform_id")
  platform              Platform               @relation(fields: [platformId], references: [id])
  status                GameStatus
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  gameId                Int                    @map("game_id")
  game                  Game                   @relation(fields: [gameId], references: [id])
  achievementsCompleted Boolean                @map("achievements_completed")
  review                String?

  @@map("games_status")
}

model GamesStatusCompletion {
  id            Int         @id @default(autoincrement())
  hours         Int?
  minutes       Int?
  seconds       Int?
  gamesStatusId Int         @unique @map("games_status_id")
  gamesStatus   GamesStatus @relation(fields: [gamesStatusId], references: [id], onDelete: Cascade)

  @@map("games_status_completion")
}

model FriendsList {
  id                    Int                     @id @default(autoincrement())
  ownerId               String                  @unique @map("owner_id")
  owner                 User                    @relation(fields: [ownerId], references: [oauthId], onDelete: Cascade)
  FriendsListForFriends FriendsListForFriends[]
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")

  @@map("friends_list")
}

model FriendsListForFriends {
  friendsListId Int         @map("friends_list_id")
  friendId      Int         @map("friend_id")
  friend        Friend      @relation(fields: [friendId], references: [id], onDelete: Cascade)
  friendsList   FriendsList @relation(fields: [friendsListId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@id([friendsListId, friendId])
  @@map("friends_list_for_friends")
}

model Friend {
  id                    Int                     @id @default(autoincrement())
  oauthId               String                  @unique @map("friend_id")
  user                  User                    @relation(fields: [oauthId], references: [oauthId], onDelete: Cascade)
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  FriendsListForFriends FriendsListForFriends[]

  @@map("friends")
}

model FriendsRequestsForUsers {
  ownerId    String   @map("owner_id")
  owner      User     @relation(name: "FriendRequestOwner", fields: [ownerId], references: [oauthId], onDelete: Cascade)
  receiverId String   @map("receiver_id")
  receiver   User     @relation(name: "FriendRequestReceiver", fields: [receiverId], references: [oauthId], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@id([ownerId, receiverId])
  @@map("friends_requests_for_users")
}

model UserActivity {
  id           Int        @id @default(autoincrement())
  oauthId      String     @map("oauth_id")
  user         User       @relation(fields: [oauthId], references: [oauthId], onDelete: Cascade)
  gameId       Int        @map("game_id")
  game         Game       @relation(fields: [gameId], references: [id])
  activityType GameStatus
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("user_activity")
}

model HowLongToBeatAccountMigrationStatus {
  id        Int             @id @default(autoincrement())
  oauthId   String          @unique @map("oauth_id")
  user      User            @relation(fields: [oauthId], references: [oauthId], onDelete: Cascade)
  status    MigrationStatus @default(WAITING)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  @@map("how_long_to_beat_account_migration_status")
}

enum MigrationStatus {
  WAITING
  IN_PROGRESS
  FINISHED
  FAILED
}
